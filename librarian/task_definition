# The Librarian

В ежедневието си като програмисти често ще ви се налага да работите с външни услуги, които ще ви предават данни в междинен формат. Два от най-разпространените формати за това са JSON и XML.

## Типове

Целта ви в тази задача ще е да направите ваш тип, който да имплементира Library интерфейса и функцията NewLibrary:

```go
type Library interface {

  // Добавя книга от json
  // Oтговаря с общия брой копия в библиотеката (не само наличните).
  // Aко са повече от 4 - връща грешка
  AddBookJSON(data []byte) (int, error)

  // Добавя книга от xml
  // Oтговаря с общия брой копия в библиотеката (не само наличните).
  // Ако са повече от 4 - връщаме грешка
  AddBookXML(data []byte) (int, error)

  // Ангажира свободен "библиотекар" да ни обработва заявките.
  // Библиотекарите са фиксиран брой - подават се като параметър на NewLibrary
  // Блокира ако всички библиотекари са заети.
  // Връщат се два канала:
  // първият е само за писане -  по него ще изпращаме заявките
  // вторият е само за четене - по него ще получаваме отговорите.
  // Ако затворим канала със заявките - освобождаваме библиотекаря.
  Hello() (chan<- LibraryRequest, <-chan LibraryResponse)
}

// Връща "отворена" библиотека
NewLibrary(librarians int) Library
```

... където:

```go
type LibraryRequest interface {
  // Тип на заявката:
  // 1 - Borrow book
  // 2 - Return book
  // 3 - Get availability information about book
  GetType() int

  // Връща isbn на книгата, за която се отнася Request-a
  GetISBN() string
}

type LibraryResponse interface {
  // Ако книгата съществува/налична е - обект имплементиращ fmt.Stringer (повече информация по-долу)
  // Aко книгата не съществува първият резултат е nil.
  // Връща се и подобаващa грешка (виж по-долу) - ако такава е възникнала.
  // Когато се е резултат на заявка от тип 2 (Return book) - не е нужно да я закачаме към отговора.
  GetBook() (fmt.Stringer, error)

  // available - Колко наличности от книгата имаме останали след изпълнението на заявката.
  // Тоест, ако сме имали 3 копия от Х и това е отговор на Take заявка - тук ще има 2.
  // registered - Колко копия от тази книга има регистрирани в библиотеката (макс 4).
  GetAvailability() (available int, registered int)
}
```

## Книгата като fmt.Stringer

<s>От вас искаме по подаден ISBN да намерите книгата в итернет и да ни върнете цялото и съдържание като стринг.</s>

Сега сериозно... Когато връщате информация за книга в тип имплементиращ `fmt.Stringer`, искаме резултата от `String() string` да е следния:

```
[<isbn>] <title> от <author>
```

Например, за книгата [Learn Go](https://manning.com/books/learn-go?a_aid=nathany&a_bid=53f68821) от Nathan Youngman, с isbn 9781617293092, oчакваме следния резултат:

```
[9781617293092] Learn Go от Nathan Youngman
```

## Добавяне на книги

`AddBookJSON(data string) (int, error)` и `AddBookXML(data string) (int, error)` ще получават книги в съответните формати, както следва:

### JSON

```json
{
  "isbn": "9781617293092",
  "title": "Learn Go",
  "author": {
    "first_name": "Nathan",
    "last_name": "Youngman"
  },
  "ratings": [5, 4, 4, 5, 1]
}
```


### XML

```XML
<book isbn="9781617293092">
  <title>Learn Go</title>
  <author>
    <first_name>Nathan</first_name>
    <last_name>Youngman</first_name>
  </author>
  <ratings>
    <rating>5</rating>
    <rating>4</rating>
    <rating>4</rating>
    <rating>5</rating>
    <rating>1</rating>
  </ratings>
</book>
```

## NewLibrary(librarians int) Library

Посредством функцията `NewLibrary(librarians int) Library` ще искаме да създавате нова Библиотека, в която:

- Първоначално няма книги.

- Могат да се обработват най-много librarians на брой заявки (добавянето на книга посредствам `AddBook*` не считаме за заявка).

- Посредством `AddBookXML` и `AddBookJSON` ще добавяме копия на книги в библиотеката.

- Може да има най-много по 4 копия от книга (независимо дали 3 от тях са отдадени в моментa).

## Грешки

Спазвайте **точния формат** на съобщенията за грешка. **Не трябва да има символи за нов ред в съобщенията за грешка!**

- Ако вече имаме добавени 4 копия от книга (не налични - а като цяло добавени) - не се добавя ново и се връща следната грешка:

```
Има 4 копия на книга <isbn>
```

- Не може да бъде върната книга, която не е взета от библиотеката. Тоест, ако връщаме книга с isbn "IAMNOTAREALBOOK", но такава не е била добавена в библиотеката - връщате грешка:

```
Непозната книга IAMNOTAREALBOOK
```

... или в общия случай:

```
Непозната книга <isbn>
```

- При връщане на книга, от която вече имаме налични толкова броя, колкото са добавени в библиотеката - връщаме грешка:

```
Всички копия са налични <isbn>
```

- При опит за взимане на книга, от която няма наличност се връща следната грешка:

```
Няма наличност на книга <isbn>
```

- При запитване за информация (наличност) или опит за взимане на книга, която не е била добавена нито веднъж в библиотеката:

```
Непозната книга <isbn>
```

## Заявки

Заявките биват 3 типа:

- Взимане (Borrow) - при наличност от книгата с въпросен isbn - намаляме наличносттa.
- Връщане (Return) - ако книгата е взета от библиотеката и наличността не надвишава 4 - покачваме наличността с единица.
- Наличност (Availability) - ако книгата е добавяне в библиотеката  - връщаме наличността и. Не променяме текущата наличност.

# Насоки (ВАЖНО)

Интерфейсите ще бъдат дефинирани във файл `interfaces.go` в пакета `main`.

Вие **НЕ ТРЯБВА** да дефинирате интерфейсите във вашите решения.

Нужно е само вашите типове да ги имплементират.

### just to be sure
Където в условието има `<isbn>` това упоменава място, на което вие трябва да поставите ISBN-а на съответната книга.
Например:

Ако сме казали, че съобщението за грешка трябва да е:

```
Има 4 копия на книга <isbn>
```

и книгата, за която се отнася това съобщение е със ISBN `123`, то съобщението за грешка трябва да е:

```
Има 4 копия на книга 123
```